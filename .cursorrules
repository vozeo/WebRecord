# WebRTC监控系统 Cursor AI 开发规则

## 项目概述
这是一个基于WebRTC技术的视频监控系统，采用TypeScript + Node.js + Express后端，纯HTML + JavaScript前端架构。系统经过完全重构，移除了模板渲染依赖，采用纯API模式，提高了架构的清晰度和可维护性。

## 代码规范

### TypeScript/JavaScript
- 使用TypeScript编写后端代码，严格遵循类型安全
- 使用ES6+语法，优先使用async/await处理异步操作
- 函数和变量使用驼峰命名法(camelCase)
- 常量使用大写下划线命名(UPPER_SNAKE_CASE)
- 文件名使用驼峰命名法，模块使用Pascal命名法

### 项目结构
```
src/                    # TypeScript源码目录
├── controllers/        # 控制器 - 处理HTTP请求
├── middleware/         # 中间件 - 认证、错误处理等
├── routes/            # 路由配置
├── services/          # 业务逻辑服务层
└── types/             # TypeScript类型定义

public/js/             # 前端JavaScript文件
views/                 # HTML模板文件
scripts/               # 脚本文件
docs/                  # 项目文档
trash/                 # 旧代码和文档备份
```

### 错误处理
- 所有异步函数必须使用try-catch包装
- 使用统一的错误响应格式：`{ code: number, message: string, data?: any }`
- 前端使用template.js的showError方法显示错误

### 认证和权限
- 使用Session-based认证，存储在Redis中
- 权限级别：0=学生, >=1=管理员, >=5=超级管理员
- API路由使用对应的认证中间件：auth, opAuth
- 页面路由根据用户级别显示不同功能

## 文档管理

### 文档结构
- `docs/项目介绍.md` - 完整的项目介绍和技术文档
- `docs/安装配置指南.md` - 从零开始的完整安装配置指南
- `trash/docs/` - 旧文档备份，包含历史技术信息

### 文档内容要求
- 保持中文文档的语言一致性
- 包含详细的技术架构和协议说明
- 提供完整的API接口文档
- 包含Socket.IO事件协议详细说明
- 提供故障排除和性能优化建议

## AI助手行为规则

### 代码修改
- 修改现有文件而不是创建新文件
- 保持TypeScript类型安全
- 遵循项目既有的代码风格和结构
- 更新文档时确保与实际代码一致

### 文档处理
- 保留有用的历史信息，移动到trash目录而不是删除
- 更新项目结构图和API文档
- 保持中文文档的语言一致性
- 整理重复或冗余的文档内容
- 确保文档包含完整的技术细节

### 问题解决
- 优先修复现有问题而不是添加新功能
- 理解完整的数据流：录制→上传→存储→监控→下载
- 考虑安全性：权限控制、文件访问、用户认证
- 测试建议：提供具体的测试步骤和预期结果

## 禁止行为
- **绝对禁止删除任何文件！** 所有不需要的文件必须移动到trash目录
- 不要修改trash/目录下的文件（旧代码和文档备份）
- 不要创建新的模板引擎或框架
- 不要改变现有的认证机制
- 不要修改数据库结构除非明确要求
- 不要添加不必要的依赖
- 不要直接删除文件，应该移动到trash目录

## 文件管理规则
- **重要：永远不要删除文件！**
- 所有旧文件、不需要的文件、重复的文件都要移动到trash目录
- trash目录结构：
  - `trash/docs/` - 旧文档
  - `trash/old_routes/` - 旧路由文件
  - `trash/old_services/` - 旧服务文件
  - `trash/old_middleware/` - 旧中间件文件
  - `trash/old_js/` - 旧JavaScript文件
- 移动文件时使用有意义的目录名，避免冲突

## 响应要求
- 始终使用中文回复
- 提供具体的代码示例
- 解释修改的原因和影响
- 更新相关文档和注释
- 保持文档的完整性和准确性

## 技术细节

### Socket.IO事件协议
- 使用message事件处理在线状态、录制控制等
- 使用watch事件建立监控关系
- 使用file事件处理文件上传
- 使用state事件广播状态更新
- 使用notice事件发送通知

### 数据结构
- AllUsers对象存储所有用户状态
- RecordList对象管理录制状态
- 支持多设备录制和状态同步

### 性能优化
- 文件切片上传避免大文件问题
- Socket.IO房间机制减少广播开销
- 数据库连接池优化
- 错误日志限制防止内存泄漏

## 打包脚本
- 使用简单的tar命令打包
- 排除node_modules、trash、images等不需要的文件
- 包含src/、public/、views/、docs/、scripts/等核心文件
- 生成版本化的压缩包